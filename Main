
module alu(op,a,b,s,cin);
input [63:0]a,b;
input [1:0]s;
input cin;

output reg [127:0]op;
//wire [63:0]b1;
wire [63:0]i0,i1,i3,i4;
wire [127:0]i2;
wire a1,a2;
wire [10:0]a3;

cla64 CLA64_inst (
    .sum(i0),
    .cout(a1),
    .a(a),
    .b(b),
    .cin(cin)
  );
  
  fs64 FS64_inst (
    .d(i1),
    .br(a2),
    .a(a),
    .b(b),
    .cin(cin)
  );
  
  bm BM64_inst (
    .y(i2),
    .a(a),
    .b(b)
  );  
  divider DIVIDER_inst (
    .q(i3),
    .r(a3),
    .a(a),
    .b(b)
  );  


always @(*)
begin
    if (s == 2'b00) //ADD
    begin
        op = i0;
    end
    else if (s == 2'b01) //SUB 
    begin
        op = i1;
    end
    else if (s == 2'b10) //MUL
        op=i2;
    else if (s==2'b11)
    begin
        op = i3;
    end
    else
    op=0;
end


endmodule





//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% ADDER %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
module cla(sum,cout,a,b,cin);
input[3:0] a,b;
input cin;
output [3:0] sum;
output cout;
wire p0,p1,p2,p3,g0,g1,g2,g3,c0,c1,c2,c3,c4;
//propogate
assign p0=(a[0]^b[0]),
p1=(a[1]^b[1]),
p2=(a[2]^b[2]),
p3=(a[3]^b[3]);
//genereate
assign g0=(a[0]&b[0]),
g1=(a[1]&b[1]),
g2=(a[2]&b[2]),
g3=(a[3]&b[3]);
//carry
assign c0=g0|(p0&cin),
c1=g1|(p1&g0)|(p1&p0&cin),
c2=g2|(p2&g1)|(p2&p1&g0)|(p1&p1&p0&cin),
c3=g3|(p3&g2)|(p3&p2&g1)|(p3&p2&p1&g0)|(p3&p2&p1&p0&cin);
assign cout=c3;
//sum
assign sum[0]=p0^cin,
sum[1]=p1^c0,
sum[2]=p2^c1,
sum[3]=p3^c2;
endmodule

module cla16(sum,cout,a,b,cin);
  input[15:0] a,b;
  input cin;
  output[15:0] sum;
  output cout;
  wire c3,c7,c11;
  cla x1(sum[3:0],c3,a[3:0],b[3:0],cin);
  cla x2(sum[7:4],c7,a[7:4],b[7:4],c3);
  cla x3(sum[11:8],c11,a[11:8],b[11:8],c7);
  cla x4(sum[15:12],cout,a[15:12],b[15:12],c11);
endmodule

module cla64(sum,cout,a,b,cin);
  input[63:0] a,b;
  input cin;
  output[63:0] sum;
  output cout;
  wire c15,c31,c47;
  cla16 x5(sum[15:0],c15,a[15:0],b[15:0],cin);
  cla16 x6(sum[31:16],c31,a[31:16],b[31:16],c15);
  cla16 x7(sum[47:32],c47,a[47:32],b[47:32],c31);
  cla16 x8(sum[63:48],cout,a[63:48],b[63:48],c47);
endmodule

//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% SUBTRACTOR %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
module fs(d,br,a,b,cin);
  input a,b,cin;
  output d,br;
  assign d=a^b^cin;
  assign br=~a&(b^cin)|(b&cin);
endmodule

module fs4(d,br,a,b,cin);
  input[3:0] a,b;
  input cin;
  output[3:0] d;
  output br;
  wire br0,br1,br2;
  fs x1(d[0],br0,a[0],b[0],cin);
  fs x2(d[1],br1,a[1],b[1],br0);
  fs x3(d[2],br2,a[2],b[2],br1);
  fs x4(d[3],br,a[3],b[3],br2);
endmodule

module fs16(d,br,a,b,cin);
  input[15:0] a,b;
  input cin;
  output[15:0] d;
  output br;
  wire br3,br7,br11;
  fs4 x5(d[3:0],br3,a[3:0],b[3:0],cin);
  fs4 x6(d[7:4],br7,a[7:4],b[7:4],br3);
  fs4 x7(d[11:8],br11,a[11:8],b[11:8],br7);
  fs4 x8(d[15:12],br,a[15:12],b[15:12],br11);
endmodule

module fs64(d,br,a,b,cin);
  input[63:0] a,b;
  input cin;
  output[63:0] d;
  output br;
  wire br15,br31,br47;
  fs16 x9(d[15:0],br15,a[15:0],b[15:0],cin);
  fs16 x10(d[31:16],br31,a[31:16],b[31:16],br15);
  fs16 x11(d[47:32],br47,a[47:32],b[47:32],br31);
  fs16 x12(d[63:48],br,a[63:48],b[63:48],br47);
endmodule

//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% MULTIPLIER %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
module bm(y,a,b);
      input signed [63:0] a, b;
       output signed [127:0] y;
       reg signed [127:0] y;
       reg [1:0] temp;
       integer i;
       reg bn,y_temp;
       reg [63:0] bbar;
       always @ (a, b)
       begin
       y = 128'd0;
       bn = 1'd0;
       for (i = 0; i < 64; i = i + 1)
       begin
       temp = {a[i], bn};
       bbar = - b;
  case (temp)
       2'b10 : y [127 : 64] = y [127 : 64] + bbar;
       2'b01 : y [127 : 64] = y [127 : 64] + b;
       default : begin end
       endcase
       y_temp = y[127];
       y = y >> 1;
       y[127] = y_temp;
       bn = a[i];
           end
       end       
endmodule

//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% DIVIDER %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
module divider(q,r,a,b);
  input[63:0] a,b;
  output[63:0] q,r;
  reg[63:0] q=0,r=0;
  reg[63:0] ac,bc,acc;
  integer i;
  always@(a,b)
  begin
    ac=a;
    bc=b;
    acc=0;
    for(i=0;i<64;i=i+1)
    begin
      acc={acc[62:0],ac[63]};
      ac=ac<<1;
      acc=acc-bc;
      if(acc[63]==1)
        begin
          ac[0]=0;
          acc=acc+bc;
        end
      else
        ac[0]=1;
        end
      q=ac;
      r=acc;
    end
 endmodule


